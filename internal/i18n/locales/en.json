{
  "cmd.root.short": "Document automation and AI-powered content generation CLI",
  "cmd.root.long": "pyhub-docs is a powerful CLI tool for document automation.\nIt automates document editing and content generation tasks.",
  
  "cmd.replace.short": "Replace text in documents using rules from a YAML file",
  "cmd.replace.long": "Replace text in Word and PowerPoint documents based on rules defined in a YAML file.\nSupports batch processing of multiple files and directories.",
  
  "cmd.create.short": "Create documents from markdown files",
  "cmd.create.long": "Create Word or PowerPoint documents from markdown files.\n\nSupports:\n  • Direct markdown to document conversion\n  • Template-based document generation\n  • Style and format preservation",
  
  "cmd.template.short": "Process documents using templates",
  "cmd.template.long": "Process Word or PowerPoint documents using templates with placeholders.\n\nPlaceholders use the {{placeholder_name}} format and can be replaced with values\nprovided via command-line flags or from a YAML/JSON file.",
  
  "cmd.generate.short": "Generate content using AI (OpenAI)",
  "cmd.generate.long": "Generate various types of content using OpenAI's language models.\n\nSupports blog posts, documentation, reports, and custom content types.",
  
  "cmd.version.short": "Print version information",
  "cmd.version.long": "Print version information including version number, commit hash, and build date.",

  "flag.rules": "YAML file containing replacement rules",
  "flag.path": "Path to file or directory to process",
  "flag.dryrun": "Show what would be changed without making actual changes",
  "flag.backup": "Create backup before modifying files",
  "flag.recursive": "Process subdirectories recursively",
  "flag.exclude": "Glob pattern for files to exclude",
  "flag.from": "Input markdown file",
  "flag.template": "Template document file",
  "flag.output": "Output file path",
  "flag.format": "Output format (docx|pptx, auto-detected from extension)",
  "flag.force": "Overwrite existing output file",
  "flag.values": "Values file (YAML or JSON)",
  "flag.set": "Set individual values (format: key=value)",
  "flag.type": "Content type to generate",
  "flag.prompt": "Content generation prompt",
  "flag.lang": "Display language (en|ko)",

  "success.created": "✅ Successfully created {{.File}}",
  "success.replaced": "✓ {{.File}} - Replacements: {{.Count}}",
  "success.backup": "Backup created: {{.File}}",
  "success.processed": "✅ Successfully processed {{.File}}",

  "progress.converting": "Converting {{.Source}} to {{.Type}} document...",
  "progress.processing": "Processing {{.Type}} template...",
  "progress.rules": "Replacement rules to be applied:",
  "progress.dryrun": "Files that would be processed:",

  "warning.no_values": "Warning: The following placeholders have no values: {{.Placeholders}}",
  "warning.template_not_impl": "Warning: Template support is not yet implemented, ignoring --template flag",
  "warning.no_rules": "No replacement rules found in the file",
  
  "error.file_not_found": "File not found: '{{.Path}}'",
  "error.permission_denied": "Permission denied: Cannot {{.Operation}} '{{.Path}}'",
  "error.invalid_format": "Invalid document format for '{{.Path}}'",
  "error.document_corrupted": "Document is corrupted or invalid: '{{.Path}}'",
  "error.config_not_found": "Configuration file not found: '{{.File}}'",
  "error.invalid_yaml": "Invalid YAML syntax in '{{.File}}'",
  "error.missing_api_key": "{{.Provider}} API key is not configured",
  "error.out_of_memory": "Not enough memory to process document",
  "error.network_timeout": "Network request timed out",
  
  "suggestion.check_file_exists": "Check if the file exists using 'ls' or 'dir'",
  "suggestion.use_absolute_path": "Use an absolute path if the relative path isn't working",
  "suggestion.check_permissions": "Check file permissions: ls -l {{.Path}}",
  "suggestion.run_as_admin": "Run with appropriate permissions (sudo on Unix/Admin on Windows)",
  "suggestion.use_spaces_not_tabs": "Use spaces for indentation, not tabs",
  "suggestion.set_api_key": "Set the environment variable: export {{.Provider}}_API_KEY=your-key-here",
  "suggestion.use_streaming": "Use --streaming mode for large files: dox replace --streaming",
  "suggestion.close_apps": "Close other applications to free up memory",
  "suggestion.check_format": "Convert the file to {{.Format}} format first",
  "suggestion.retry_request": "Please try again in a few moments",
  
  "detail.searched_in": "Searched in: {{.Path}}",
  "detail.error_at_line": "Error at line {{.Line}}: {{.Error}}",
  "detail.expected_format": "Expected {{.Expected}}, but found {{.Found}}",
  "detail.file_size": "File size: {{.Size}} MB",
  "detail.operation": "Operation: {{.Operation}}",

  "error.file_exists": "Output file already exists: {{.Path}} (use --force to overwrite)",
  "error.invalid_set": "Invalid --set format: {{.Value}} (expected key=value)",
  "error.unsupported": "Unsupported {{.Type}}: {{.Value}} (supported: {{.Supported}})",
  "error.load_rules": "Failed to load rules: {{.Error}}",
  "error.load_values": "Failed to load values from file: {{.Error}}",
  "error.process": "Failed to process {{.Type}}: {{.Error}}",
  "error.validate": "Failed to validate {{.Type}}: {{.Error}}",
  "error.conversion": "Conversion failed: {{.Error}}",
  "error.not_implemented": "{{.Feature}} not yet implemented ({{.Phase}})",
  "error.parse_yaml": "Failed to parse YAML: {{.Error}}",
  "error.parse_json": "Failed to parse JSON: {{.Error}}",
  "error.parse_file": "Failed to parse file as YAML or JSON",
  "error.create_backup": "Failed to create backup: {{.Error}}",
  "error.access_path": "Failed to access target path: {{.Error}}",

  "summary.total": "Total files: {{.Count}}",
  "summary.success": "Successful: {{.Count}}",
  "summary.failed": "Failed: {{.Count}}",
  "summary.skipped": "Skipped: {{.Count}}",
  "summary.results": "Processing results:",

  "error.code.api_key_not_found": "[ERROR] [DOX001]: API key not found for {{.Provider}}",
  "error.code.invalid_config": "[ERROR] [DOX002]: Invalid configuration",
  "error.code.config_not_found": "[ERROR] [DOX003]: Configuration file not found",
  "error.code.invalid_api_key": "[ERROR] [DOX004]: Invalid API key",
  "error.code.config_save_failed": "[ERROR] [DOX005]: Failed to save configuration",
  "error.code.file_not_found": "[ERROR] [DOX100]: File not found: {{.Path}}",
  "error.code.file_read_failed": "[ERROR] [DOX101]: Failed to read file: {{.Path}}",
  "error.code.file_write_failed": "[ERROR] [DOX102]: Failed to write file: {{.Path}}",
  "error.code.permission_denied": "[ERROR] [DOX103]: Permission denied: {{.Path}}",
  "error.code.file_already_exists": "[ERROR] [DOX104]: File already exists: {{.Path}}",
  "error.code.invalid_path": "[ERROR] [DOX105]: Invalid path: {{.Path}}",
  "error.code.document_corrupted": "[ERROR] [DOX200]: Document is corrupted or invalid",
  "error.code.unsupported_format": "[ERROR] [DOX201]: Unsupported document format: {{.Format}}",
  "error.code.empty_document": "[ERROR] [DOX202]: Document is empty",
  "error.code.document_parse_failed": "[ERROR] [DOX203]: Failed to parse document",
  "error.code.template_parse_failed": "[ERROR] [DOX204]: Failed to parse template",
  "error.code.ai_request_failed": "[ERROR] [DOX300]: AI request failed",
  "error.code.ai_rate_limited": "[WARNING] [DOX301]: {{.Provider}} API rate limit exceeded",
  "error.code.ai_timeout": "[ERROR] [DOX302]: AI request timeout",
  "error.code.ai_invalid_response": "[ERROR] [DOX303]: Invalid response from AI service",
  "error.code.ai_service_down": "[ERROR] [DOX304]: AI service is unavailable",
  "error.code.invalid_input": "[ERROR] [DOX400]: Invalid input: {{.Field}}",
  "error.code.missing_required": "[ERROR] [DOX401]: Required parameter missing: {{.Field}}",
  "error.code.invalid_format": "[ERROR] [DOX402]: Invalid format: {{.Format}}",
  "error.code.out_of_range": "[ERROR] [DOX403]: Value out of range: {{.Value}}",
  "error.code.network_timeout": "[ERROR] [DOX500]: Network timeout",
  "error.code.connection_refused": "[ERROR] [DOX501]: Connection refused",
  "error.code.dns_resolution_failed": "[ERROR] [DOX502]: DNS resolution failed",
  "error.code.internal_error": "[ERROR] [DOX900]: Internal error occurred",
  "error.code.not_implemented": "[ERROR] [DOX901]: Feature not implemented: {{.Feature}}",

  "solution.api_key_openai": "Set OPENAI_API_KEY environment variable or use 'dox config --set openai.api_key <key>'",
  "solution.api_key_claude": "Set ANTHROPIC_API_KEY environment variable or use 'dox config --set claude.api_key <key>'",
  "solution.api_key_generic": "Set the appropriate API key environment variable or use 'dox config --set <provider>.api_key <key>'",
  "solution.check_file": "Check if the file exists and the path is correct",
  "solution.check_permission": "Check file permissions or run with appropriate privileges",
  "solution.use_force": "Use --force to overwrite existing file",
  "solution.wait_retry": "Wait {{.RetryAfter}} before retrying or upgrade your API plan",
  "solution.upgrade_api": "Wait a moment before retrying or upgrade your API plan",
  "solution.check_format": "Expected format: {{.Expected}}",
  "solution.provide_required": "Please provide the required parameter: {{.Field}}"
}