# Feature Implementation Workflow
# Orchestrates agent collaboration for new feature development

workflow:
  name: "Feature Implementation"
  description: "Coordinated approach to implementing new features with proper design, testing, and documentation"

phases:
  1_analysis:
    lead: CLIArchitect
    duration: "30-60 minutes"
    activities:
      - Analyze feature requirements
      - Design command structure
      - Define user interaction flow
      - Identify error scenarios
    outputs:
      - Command specification
      - Flag definitions
      - User flow diagram
    
  2_design:
    lead: GoMaster
    consults: [DocProcessor, AIIntegrator]
    duration: "1-2 hours"
    activities:
      - Design code architecture
      - Define interfaces and types
      - Plan package structure
      - Identify dependencies
    outputs:
      - Technical design document
      - Interface definitions
      - Dependency list
  
  3_implementation:
    lead: GoMaster
    supports: [DocProcessor, AIIntegrator]
    duration: "4-8 hours"
    activities:
      - Implement core logic
      - Handle error cases
      - Add logging and metrics
      - Integrate with existing code
    outputs:
      - Working implementation
      - Unit tests
      - Integration points
  
  4_testing:
    lead: TestGuardian
    duration: "2-4 hours"
    activities:
      - Write comprehensive tests
      - Verify edge cases
      - Check coverage
      - Run benchmarks
    outputs:
      - Test suite
      - Coverage report
      - Performance metrics
  
  5_documentation:
    lead: DocScribe
    consults: [CLIArchitect, GoMaster]
    duration: "1-2 hours"
    activities:
      - Update README
      - Write user guide
      - Create examples
      - Document API changes
    outputs:
      - Updated documentation
      - Code examples
      - Migration guide (if needed)

triggers:
  commands:
    - /implement
    - /feature
    - /develop
  
  keywords:
    - "implement feature"
    - "add functionality"
    - "new command"
    - "create feature"

quality_gates:
  before_implementation:
    - Requirements clearly defined
    - Design reviewed and approved
    - Dependencies available
  
  before_testing:
    - Code compiles without errors
    - Basic functionality works
    - No obvious bugs
  
  before_documentation:
    - All tests passing
    - Coverage meets standards
    - Performance acceptable
  
  before_completion:
    - Documentation complete
    - Examples working
    - Review completed

handoff_protocols:
  architect_to_developer:
    artifacts:
      - Command specification
      - Error handling requirements
      - User experience guidelines
    communication:
      - Review CLI design decisions
      - Clarify any ambiguities
      - Confirm technical feasibility
  
  developer_to_tester:
    artifacts:
      - Implemented code
      - Basic unit tests
      - Known limitations
    communication:
      - Explain implementation approach
      - Identify critical paths
      - Note areas needing focus
  
  tester_to_documenter:
    artifacts:
      - Test results
      - Coverage reports
      - Example usage
    communication:
      - Share test scenarios
      - Provide working examples
      - Note edge cases

success_criteria:
  - Feature works as specified
  - All tests passing (>80% coverage)
  - Documentation complete and clear
  - Performance within acceptable limits
  - No security vulnerabilities
  - Code follows project standards